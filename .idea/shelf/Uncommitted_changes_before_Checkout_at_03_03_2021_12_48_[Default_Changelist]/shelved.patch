Index: app/src/main/java/ru/smartro/worknote/extensions/Alert.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.smartro.worknote.extensions\r\n\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.view.View\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.fragment.app.Fragment\r\nimport kotlinx.android.synthetic.main.alert_accept_task.view.*\r\nimport kotlinx.coroutines.*\r\nimport ru.smartro.worknote.R\r\n\r\nprivate lateinit var dialog: AlertDialog\r\n\r\nfun AppCompatActivity.loadingShow() {\r\n    try {\r\n        val builder = AlertDialog.Builder(this)\r\n        val inflater = this.layoutInflater\r\n        val view = inflater.inflate(R.layout.alert_loading, null)\r\n        builder.setView(view)\r\n        builder.setCancelable(false)\r\n        dialog = builder.create()\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog.show()\r\n    } catch (e: Exception) {\r\n        println()\r\n    }\r\n}\r\n\r\nfun AppCompatActivity.warningCameraShow(title: String): View {\r\n    val builder = AlertDialog.Builder(this)\r\n    val inflater = this.layoutInflater\r\n    val view = inflater.inflate(R.layout.alert_warning_camera, null)\r\n    view.title_tv.text = title\r\n    builder.setView(view)\r\n    builder.setCancelable(false)\r\n    dialog = builder.create()\r\n    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n    dialog.show()\r\n    return view\r\n}\r\n\r\nfun AppCompatActivity.warningEndTask(title: String): View {\r\n    val builder = AlertDialog.Builder(this)\r\n    val inflater = this.layoutInflater\r\n    val view = inflater.inflate(R.layout.alert_warning_camera, null)\r\n    view.title_tv.text = title\r\n    builder.setView(view)\r\n    builder.setCancelable(false)\r\n    dialog = builder.create()\r\n    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n    dialog.show()\r\n    return view\r\n}\r\n\r\nfun AppCompatActivity.warningDelete(title: String): View {\r\n    val builder = AlertDialog.Builder(this)\r\n    val inflater = this.layoutInflater\r\n    val view = inflater.inflate(R.layout.alert_warning_delete, null)\r\n    view.title_tv.text = title\r\n    builder.setView(view)\r\n    builder.setCancelable(false)\r\n    dialog = builder.create()\r\n    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n    dialog.show()\r\n    return view\r\n}\r\nfun AppCompatActivity.warningContainerFailure(title: String): View {\r\n    val builder = AlertDialog.Builder(this)\r\n    val inflater = this.layoutInflater\r\n    val view = inflater.inflate(R.layout.alert_warning_failure, null)\r\n    view.title_tv.text = title\r\n    builder.setView(view)\r\n    builder.setCancelable(false)\r\n    dialog = builder.create()\r\n    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n    dialog.show()\r\n    return view\r\n}\r\n\r\nfun Fragment.warningDelete(title: String): View {\r\n    val builder = AlertDialog.Builder(activity!!)\r\n    val inflater = this.layoutInflater\r\n    val view = inflater.inflate(R.layout.alert_warning_delete, null)\r\n    view.title_tv.text = title\r\n    builder.setView(view)\r\n    builder.setCancelable(false)\r\n    dialog = builder.create()\r\n    dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n    dialog.show()\r\n    return view\r\n}\r\n\r\nfun AppCompatActivity.loadingHide(time: Long = 0) {\r\n    try {\r\n        println()\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            println()\r\n            delay(time)\r\n            withContext(Dispatchers.Main) {\r\n                dialog.dismiss()\r\n            }\r\n            println()\r\n        }\r\n        println()\r\n    } catch (e: Exception) {\r\n        println()\r\n    }\r\n\r\n}\r\n\r\n\r\nfun Fragment.loadingShow() {\r\n    try {\r\n        val builder = AlertDialog.Builder(activity!!)\r\n        val inflater = this.layoutInflater\r\n        val view = inflater.inflate(R.layout.alert_loading, null)\r\n        builder.setView(view)\r\n        builder.setCancelable(false)\r\n        dialog = builder.create()\r\n        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\r\n        dialog.show()\r\n    } catch (e: Exception) {\r\n        println()\r\n    }\r\n}\r\n\r\nfun Fragment.loadingHide(time: Long = 0) {\r\n    try {\r\n        println()\r\n        CoroutineScope(Dispatchers.IO).launch {\r\n            println()\r\n            delay(time)\r\n            withContext(Dispatchers.Main) {\r\n                dialog.dismiss()\r\n            }\r\n            println()\r\n        }\r\n        println()\r\n\r\n\r\n    } catch (e: Exception) {\r\n        println()\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ru/smartro/worknote/extensions/Alert.kt	(revision 8a093886f3b848b26c2075289b226be2f99bd47b)
+++ app/src/main/java/ru/smartro/worknote/extensions/Alert.kt	(date 1614690414783)
@@ -11,7 +11,7 @@
 import ru.smartro.worknote.R
 
 private lateinit var dialog: AlertDialog
-
+//Объект для создания alert dialog
 fun AppCompatActivity.loadingShow() {
     try {
         val builder = AlertDialog.Builder(this)
Index: app/src/main/java/ru/smartro/worknote/adapter/WayPointAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.smartro.worknote.adapter\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.core.view.isVisible\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport io.realm.RealmList\r\nimport kotlinx.android.synthetic.main.map_behavior_item.view.*\r\nimport ru.smartro.worknote.R\r\nimport ru.smartro.worknote.service.database.entity.way_task.WayPointEntity\r\nimport ru.smartro.worknote.util.StatusEnum\r\n\r\nclass WayPointAdapter(private val listener: ContainerClickListener, private val items: RealmList<WayPointEntity>) : RecyclerView.Adapter<WayPointAdapter.WayPointViewHolder>() {\r\n    private var checkedPosition = -1\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): WayPointViewHolder {\r\n        val view = LayoutInflater.from(parent.context)\r\n            .inflate(R.layout.map_behavior_item, parent, false)\r\n        return WayPointViewHolder(view)\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return items.size\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: WayPointViewHolder, position: Int) {\r\n        val item = items[position]\r\n\r\n        if (checkedPosition == -1) {\r\n            holder.itemView.map_behavior_expl.collapse()\r\n        } else {\r\n            if (checkedPosition == holder.adapterPosition) {\r\n                holder.itemView.map_behavior_expl.expand(true)\r\n            } else {\r\n                holder.itemView.map_behavior_expl.collapse()\r\n            }\r\n        }\r\n\r\n        holder.itemView.map_behavior_address.text = item!!.name\r\n        holder.itemView.map_behavior_scrp_id.text = item.srp_id.toString()\r\n        holder.itemView.map_behavior_container_count.text = \"${item!!.cs!!.size} контейнер\"\r\n\r\n\r\n        when (items[position]!!.status) {\r\n            StatusEnum.empty -> {\r\n                holder.itemView.setOnClickListener {\r\n                    if (checkedPosition != holder.adapterPosition) {\r\n                        holder.itemView.map_behavior_expl.expand()\r\n                        holder.itemView.map_behavior_start_service.setOnClickListener {\r\n                            listener.startPointService(item)\r\n                        }\r\n                        notifyItemChanged(checkedPosition)\r\n                        checkedPosition = holder.adapterPosition\r\n                    }\r\n                }\r\n            }\r\n            StatusEnum.completed -> {\r\n                holder.itemView.map_behavior_status.isVisible = true\r\n                holder.itemView.map_behavior_status.setImageResource(R.drawable.ic_check)\r\n                holder.itemView.setOnClickListener {\r\n                    //nothing\r\n                }\r\n            }\r\n            StatusEnum.breakDown -> {\r\n                holder.itemView.map_behavior_status.isVisible = true\r\n                holder.itemView.map_behavior_status.setImageResource(R.drawable.ic_red_check)\r\n                holder.itemView.setOnClickListener {\r\n                    if (checkedPosition != holder.adapterPosition) {\r\n                        holder.itemView.map_behavior_expl.expand()\r\n                        holder.itemView.map_behavior_start_service.setOnClickListener {\r\n                            listener.startPointService(item)\r\n                        }\r\n                        notifyItemChanged(checkedPosition)\r\n                        checkedPosition = holder.adapterPosition\r\n                    }\r\n                }\r\n            }\r\n\r\n            StatusEnum.failure -> {\r\n                holder.itemView.map_behavior_status.isVisible = true\r\n                holder.itemView.map_behavior_status.setImageResource(R.drawable.ic_cancel)\r\n                holder.itemView.setOnClickListener {\r\n                    //nothing\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    class WayPointViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n\r\n    }\r\n\r\n    interface ContainerClickListener {\r\n        fun startPointService(item: WayPointEntity)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/ru/smartro/worknote/adapter/WayPointAdapter.kt	(revision 8a093886f3b848b26c2075289b226be2f99bd47b)
+++ app/src/main/java/ru/smartro/worknote/adapter/WayPointAdapter.kt	(date 1614689407369)
@@ -66,14 +66,7 @@
                 holder.itemView.map_behavior_status.isVisible = true
                 holder.itemView.map_behavior_status.setImageResource(R.drawable.ic_red_check)
                 holder.itemView.setOnClickListener {
-                    if (checkedPosition != holder.adapterPosition) {
-                        holder.itemView.map_behavior_expl.expand()
-                        holder.itemView.map_behavior_start_service.setOnClickListener {
-                            listener.startPointService(item)
-                        }
-                        notifyItemChanged(checkedPosition)
-                        checkedPosition = holder.adapterPosition
-                    }
+                 //nothing
                 }
             }
 
